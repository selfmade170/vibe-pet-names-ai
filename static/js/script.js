# ----- –Ø—á–µ–π–∫–∞ 5: –°–æ–∑–¥–∞–Ω–∏–µ JavaScript-—Ñ–∞–π–ª–∞ -----
%%writefile static/js/script.js
// –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –í–ï–°–¨ –∫–æ–¥ JS (–≤–µ—Ä—Å–∏—è —Å AI), –Ω–æ —Å –æ–¥–Ω–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –≤ fetch
document.addEventListener('DOMContentLoaded', () => {
    const preferencesForm = document.getElementById('preferences-form');
    const generateButton = document.getElementById('generate-button');
    const namesList = document.getElementById('names-list');
    const resultsSection = document.getElementById('results-section');
    const favoriteNamesList = document.getElementById('favorite-names-list');
    let favorites = [];

    async function generateNames(event) {
        event.preventDefault();
        const buttonOriginalText = generateButton.innerHTML;
        generateButton.innerHTML = "–î—É–º–∞–µ–º... ü§î";
        generateButton.disabled = true;

        const selectedGender = document.querySelector('input[name="gender"]:checked').value;
        const selectedChars = Array.from(document.querySelectorAll('input[name="character"]:checked')).map(el => el.value).join(', ');
        const selectedStyle = document.querySelector('input[name="style"]:checked').value;
        const keywords = document.getElementById('keywords').value;

        let prompt = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 10 –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–º–µ–Ω –¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞. –í–∞–∂–Ω–æ: –≤–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ —á–∏—Å—Ç–æ–≥–æ JSON-–º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä: ["–ò–º—è1", "–ò–º—è2", "–ò–º—è3"]. –ù–∏–∫–∞–∫–æ–≥–æ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Ç–æ–º—Ü–µ: - –ü–æ–ª: ${selectedGender} - –•–∞—Ä–∞–∫—Ç–µ—Ä: ${selectedChars || '–Ω–µ —É–∫–∞–∑–∞–Ω'} - –ñ–µ–ª–∞–µ–º—ã–π —Å—Ç–∏–ª—å –∏–º–µ–Ω–∏: ${selectedStyle} - –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞: ${keywords || '–Ω–µ—Ç'}`;

        try {
            // –í–ê–ñ–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï! –ü—É—Ç—å —Å—Ç–∞–ª –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º.
            const response = await fetch('/generate-names', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ prompt: prompt }),
            });

            if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.statusText}`);
            const data = await response.json();
            displayNames(data.names);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞:", error);
            namesList.innerHTML = '<p>–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!</p>';
            resultsSection.style.display = 'block';
        } finally {
            generateButton.innerHTML = buttonOriginalText;
            generateButton.disabled = false;
        }
    }

    function displayNames(names) {
        namesList.innerHTML = '';
        if (!names || names.length === 0) {
            namesList.innerHTML = '<p>AI –Ω–µ —Å–º–æ–≥ –ø—Ä–∏–¥—É–º–∞—Ç—å –∏–º–µ–Ω–∞... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!</p>';
        } else {
            names.forEach(name => {
                const isFavorited = favorites.includes(name);
                const card = `<div class="name-card"><span>${name}</span><button class="favorite-button ${isFavorited ? 'favorited' : ''}" data-name="${name}" aria-label="–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ">‚ô•</button></div>`;
                namesList.insertAdjacentHTML('beforeend', card);
            });
        }
        resultsSection.style.display = 'block';
    }

    function toggleFavorite(event) {
        const button = event.target.closest('.favorite-button');
        if (!button) return;
        const name = button.dataset.name;
        if (favorites.includes(name)) {
            favorites = favorites.filter(fav => fav !== name);
            button.classList.remove('favorited');
        } else {
            favorites.push(name);
            button.classList.add('favorited');
        }
        updateFavoritesList();
        saveFavoritesToLocalStorage();
    }

    function updateFavoritesList() {
        favoriteNamesList.innerHTML = '';
        favorites.forEach(name => {
            const li = document.createElement('li');
            li.textContent = name;
            favoriteNamesList.appendChild(li);
        });
    }

    function saveFavoritesToLocalStorage() {
        localStorage.setItem('vibePetNamesFavorites', JSON.stringify(favorites));
    }

    function loadFavoritesFromLocalStorage() {
        const storedFavorites = localStorage.getItem('vibePetNamesFavorites');
        if (storedFavorites) favorites = JSON.parse(storedFavorites);
    }

    resultsSection.style.display = 'none';
    loadFavoritesFromLocalStorage();
    updateFavoritesList();
    preferencesForm.addEventListener('submit', generateNames);
    namesList.addEventListener('click', toggleFavorite);
});